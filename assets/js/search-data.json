{
  
    
        "post0": {
            "title": "Analyze TCGA DATA",
            "content": "library(TCGAbiolinks) library(dplyr) library(SummarizedExperiment) . Attaching package: ‘dplyr’ The following objects are masked from ‘package:stats’: filter, lag The following objects are masked from ‘package:base’: intersect, setdiff, setequal, union Loading required package: MatrixGenerics Loading required package: matrixStats Attaching package: ‘matrixStats’ The following object is masked from ‘package:dplyr’: count Attaching package: ‘MatrixGenerics’ The following objects are masked from ‘package:matrixStats’: colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, colCounts, colCummaxs, colCummins, colCumprods, colCumsums, colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, colWeightedMeans, colWeightedMedians, colWeightedSds, colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, rowWeightedMads, rowWeightedMeans, rowWeightedMedians, rowWeightedSds, rowWeightedVars Loading required package: GenomicRanges Loading required package: stats4 Loading required package: BiocGenerics Attaching package: ‘BiocGenerics’ The following objects are masked from ‘package:dplyr’: combine, intersect, setdiff, union The following objects are masked from ‘package:stats’: IQR, mad, sd, var, xtabs The following objects are masked from ‘package:base’: anyDuplicated, append, as.data.frame, basename, cbind, colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply, union, unique, unsplit, which.max, which.min Loading required package: S4Vectors Attaching package: ‘S4Vectors’ The following objects are masked from ‘package:dplyr’: first, rename The following objects are masked from ‘package:base’: expand.grid, I, unname Loading required package: IRanges Attaching package: ‘IRanges’ The following objects are masked from ‘package:dplyr’: collapse, desc, slice Loading required package: GenomeInfoDb Loading required package: Biobase Welcome to Bioconductor Vignettes contain introductory material; view with &#39;browseVignettes()&#39;. To cite Bioconductor, see &#39;citation(&#34;Biobase&#34;)&#39;, and for packages &#39;citation(&#34;pkgname&#34;)&#39;. Attaching package: ‘Biobase’ The following object is masked from ‘package:MatrixGenerics’: rowMedians The following objects are masked from ‘package:matrixStats’: anyMissing, rowMedians . rse.gbm &lt;- get(load(&quot;rnaseq.recurTum_NormTissue.GBM_20220603.rda&quot;)) dataPrep.gbm &lt;- TCGAanalyze_Preprocessing(object = rse.gbm, cor.cut = 0.6, datatype=&quot;unstranded&quot;, filename=&quot;rnaseq.recurTum_NormTissue.GBM_20220607.correlation.png&quot; ) . Number of outliers: 0 . table(rse.gbm$sample_type) . Recurrent Tumor Solid Tissue Normal 13 5 . gbm.rnasdeq.dataNorm &lt;- TCGAanalyze_Normalization(tabDF = dataPrep.gbm, geneInfo = TCGAbiolinks::geneInfoHT, method = &quot;gcContent&quot; ) . I Need about 14 seconds for this Complete Normalization Upper Quantile [Processing 80k elements /s] Step 1 of 4: newSeqExpressionSet ... Step 2 of 4: withinLaneNormalization ... Step 3 of 4: betweenLaneNormalization ... Step 4 of 4: .quantileNormalization ... . gbm.rnasdeq.dataFilt &lt;- TCGAanalyze_Filtering(tabDF = gbm.rnasdeq.dataNorm, method = &quot;quantile&quot;, qnt.cut = 0.25 ) . normalTissue &lt;- colnames(rse.gbm)[rse.gbm$sample_type == &quot;Solid Tissue Normal&quot;] #rse.gbm[rse.gbm$sample_type == &quot;Solid Tissue Normal&quot;,] recurTumor &lt;- colnames(rse.gbm)[rse.gbm$sample_type == &quot;Recurrent Tumor&quot;] gbm.rnaseqNormal.dataFilt &lt;- subset(gbm.rnasdeq.dataFilt, select = colnames(gbm.rnasdeq.dataFilt) %in% normalTissue) gbm.rnaseqTumor.dataFilt &lt;- subset(gbm.rnasdeq.dataFilt, select = colnames(gbm.rnasdeq.dataFilt) %in% recurTumor) . # head(gbm.rnaseqNormal.dataFilt ) # head(gbm.rnaseqTumor.dataFilt) # recurTumor . colnames(rse.gbm) #[rse.gbm$sample_type == &quot;Solid Tissue Normal&quot;] colnames(gbm.rnasdeq.dataFilt) . &lt;ol class=list-inline&gt;&#39;TCGA-06-0171-02A-11R-2005-01&#39; | &#39;TCGA-06-0211-02A-02R-2005-01&#39; | &#39;TCGA-06-0190-02A-01R-2005-01&#39; | &#39;TCGA-06-0125-02A-11R-2005-01&#39; | &#39;TCGA-14-0736-02A-01R-2005-01&#39; | &#39;TCGA-19-4065-02A-11R-2005-01&#39; | &#39;TCGA-19-0957-02A-11R-2005-01&#39; | &#39;TCGA-06-0678-11A-32R-A36H-07&#39; | &#39;TCGA-14-1402-02A-01R-2005-01&#39; | &#39;TCGA-06-0210-02A-01R-2005-01&#39; | &#39;TCGA-06-0152-02A-01R-2005-01&#39; | &#39;TCGA-06-0681-11A-41R-A36H-07&#39; | &#39;TCGA-06-AABW-11A-31R-A36H-07&#39; | &#39;TCGA-19-1389-02A-21R-2005-01&#39; | &#39;TCGA-06-0675-11A-32R-A36H-07&#39; | &#39;TCGA-06-0680-11A-32R-A36H-07&#39; | &#39;TCGA-06-0221-02A-11R-2005-01&#39; | &#39;TCGA-14-1034-02B-01R-2005-01&#39; | &lt;/ol&gt; &lt;ol class=list-inline&gt;&#39;TCGA-06-0125-02A-11R-2005-01&#39; | &#39;TCGA-06-0152-02A-01R-2005-01&#39; | &#39;TCGA-06-0171-02A-11R-2005-01&#39; | &#39;TCGA-06-0190-02A-01R-2005-01&#39; | &#39;TCGA-06-0210-02A-01R-2005-01&#39; | &#39;TCGA-06-0211-02A-02R-2005-01&#39; | &#39;TCGA-06-0221-02A-11R-2005-01&#39; | &#39;TCGA-14-0736-02A-01R-2005-01&#39; | &#39;TCGA-14-1034-02B-01R-2005-01&#39; | &#39;TCGA-14-1402-02A-01R-2005-01&#39; | &#39;TCGA-19-0957-02A-11R-2005-01&#39; | &#39;TCGA-19-1389-02A-21R-2005-01&#39; | &#39;TCGA-19-4065-02A-11R-2005-01&#39; | &#39;TCGA-06-0675-11A-32R-A36H-07&#39; | &#39;TCGA-06-0678-11A-32R-A36H-07&#39; | &#39;TCGA-06-0680-11A-32R-A36H-07&#39; | &#39;TCGA-06-0681-11A-41R-A36H-07&#39; | &#39;TCGA-06-AABW-11A-31R-A36H-07&#39; | &lt;/ol&gt; rse.gbm . class: RangedSummarizedExperiment dim: 60660 18 metadata(1): data_release assays(6): unstranded stranded_first ... fpkm_unstrand fpkm_uq_unstrand rownames(60660): ENSG00000000003.15 ENSG00000000005.6 ... ENSG00000288674.1 ENSG00000288675.1 rowData names(10): source type ... hgnc_id havana_gene colnames(18): TCGA-06-0171-02A-11R-2005-01 TCGA-06-0211-02A-02R-2005-01 ... TCGA-06-0221-02A-11R-2005-01 TCGA-14-1034-02B-01R-2005-01 colData names(105): barcode patient ... paper_Telomere.length.estimate.in.blood.normal..Kb. paper_Telomere.length.estimate.in.tumor..Kb. . identical(rownames(gbm.rnaseqTumor.dataFilt), rownames(gbm.rnaseqNormal.dataFilt)) . TRUE . length(unique(rownames(gbm.rnaseqTumor.dataFilt) )) . 45230 # rownames(gbm.rnaseqNormal.dataFilt) &lt;- geneIDs1$SYMBOL . . gbm.DEG &lt;- TCGAanalyze_DEA(mat1 = gbm.rnaseqNormal.dataFilt, mat2 = gbm.rnaseqTumor.dataFilt, Cond1type = &quot;NORMAL&quot;, Cond2type = &quot;RECURTUMOR&quot;, fdr.cut = 0.01, logFC.cut = 1, method = &quot;glmLRT&quot; ) . Batch correction skipped since no factors provided -- DEA - o 5 samples in Cond1type NORMAL o 13 samples in Cond2type RECURTUMOR o 45230 features as miRNA or genes This may take some minutes... -- END DEA - . head(gbm.DEG) . A data.frame: 6 × 7 logFClogCPMLRPValueFDRgene_namegene_type . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;chr&gt;&lt;chr&gt; . ENSG00000000003 3.048243 | 5.839949 | 37.54155 | 8.948630e-10 | 5.790365e-08 | TSPAN6 | protein_coding | . ENSG00000000460 1.720776 | 2.106048 | 15.51685 | 8.177329e-05 | 7.213977e-04 | C1orf112 | protein_coding | . ENSG00000000971 2.794246 | 8.507568 | 16.29962 | 5.407488e-05 | 5.114496e-04 | CFH | protein_coding | . ENSG00000001460-1.670660 | 3.709343 | 17.42541 | 2.988048e-05 | 3.139359e-04 | STPG1 | protein_coding | . ENSG00000001461-2.065081 | 6.805469 | 19.18755 | 1.184834e-05 | 1.455065e-04 | NIPAL3 | protein_coding | . ENSG00000001617 2.089107 | 1.368280 | 12.44901 | 4.182129e-04 | 2.794470e-03 | SEMA3F | protein_coding | . g4count &lt;- read.csv(&quot;../downloadedDataGEO_20220524/Genes_G4number.in2csv.csv&quot;) head(g4count) . A data.frame: 6 × 2 test_idcombined_exon_introns_window200 . &lt;chr&gt;&lt;int&gt; . 1A1BG | 1 | . 2A1BG-AS1 | 0 | . 3A1CF | 0 | . 4A2M | 0 | . 5A2M-AS1 | 0 | . 6A2ML1 | 2 | . modDEG &lt;- gbm.DEG %&gt;% left_join(y=g4count, by= c(&quot;gene_name&quot; = &quot;test_id&quot;)) %&gt;% dplyr::rename( g4Num = combined_exon_introns_window200) %&gt;% na.omit() %&gt;% as.data.frame(row.names = 1:nrow(.)) # dplyr::filter(g4Num &gt; 3) head(modDEG) . A data.frame: 6 × 8 logFClogCPMLRPValueFDRgene_namegene_typeg4Num . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;chr&gt;&lt;chr&gt;&lt;int&gt; . 1 3.048243 | 5.839949 | 37.54155 | 8.948630e-10 | 5.790365e-08 | TSPAN6 | protein_coding | 2 | . 2 1.720776 | 2.106048 | 15.51685 | 8.177329e-05 | 7.213977e-04 | C1orf112 | protein_coding | 0 | . 3 2.794246 | 8.507568 | 16.29962 | 5.407488e-05 | 5.114496e-04 | CFH | protein_coding | 0 | . 4-1.670660 | 3.709343 | 17.42541 | 2.988048e-05 | 3.139359e-04 | STPG1 | protein_coding | 1 | . 5-2.065081 | 6.805469 | 19.18755 | 1.184834e-05 | 1.455065e-04 | NIPAL3 | protein_coding | 0 | . 6 2.089107 | 1.368280 | 12.44901 | 4.182129e-04 | 2.794470e-03 | SEMA3F | protein_coding | 8 | . modDEG[(modDEG$g4Num &gt;= 5) &amp; (abs(modDEG$logFC) &gt; 1),] %&gt;% head() . A data.frame: 6 × 8 logFClogCPMLRPValueFDRgene_namegene_typeg4Num . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;chr&gt;&lt;chr&gt;&lt;int&gt; . 6 2.089107 | 1.368280 | 12.44901 | 4.182129e-04 | 0.0027944704 | SEMA3F | protein_coding | 8 | . 12-2.341434 | 1.831173 | 19.31947 | 1.105734e-05 | 0.0001369826 | CYP26B1 | protein_coding | 5 | . 30-1.089065 | 3.288618 | 11.02429 | 8.992550e-04 | 0.0052542698 | PDK2 | protein_coding | 6 | . 32-2.436745 | 3.659689 | 14.24390 | 1.605808e-04 | 0.0012671093 | ABCC8 | protein_coding | 10 | . 35-1.971229 | 2.042710 | 15.17793 | 9.784021e-05 | 0.0008379687 | CACNA1G | protein_coding | 20 | . 39 2.121390 | 2.205704 | 14.36005 | 1.509721e-04 | 0.0012049820 | ALDH3B1 | protein_coding | 5 | . library(ggplot2) . # geom_smooth(method = &quot;glm&quot;, method.args = list(family = &quot;binomial&quot;)) # } ggplot(data = modDEG[(modDEG$g4Num &gt;= 4) &amp; (abs(modDEG$logFC) &gt; 1.5) &amp; (modDEG$PValue &lt;= 0.05),], aes(x = g4Num, y = logCPM, color=PValue)) + geom_point() + # geom_smooth(se = TRUE,method = &quot;gam&quot;, formula = y ~ s(x)) geom_smooth(se = TRUE, method = &quot;glm&quot;) . `geom_smooth()` using formula &#39;y ~ x&#39; . ansEA.gbm.normalVsTumor &lt;- TCGAanalyze_EAcomplete( TFname=&quot;DEA genes NORMAL Vs RECUR_GBM&quot;, RegulonList = gbm.DEG$gene_name) . [1] &#34;I need about 1 minute to finish complete Enrichment analysis GO[BP,MF,CC] and Pathways... &#34; [1] &#34;GO Enrichment Analysis BP completed....done&#34; [1] &#34;GO Enrichment Analysis MF completed....done&#34; [1] &#34;GO Enrichment Analysis CC completed....done&#34; [1] &#34;Pathway Enrichment Analysis completed....done&#34; . TCGAvisualize_EAbarplot(tf = rownames(ansEA.gbm.normalVsTumor$ResBP), GOBPTab = ansEA.gbm.normalVsTumor$ResBP, GOCCTab = ansEA.gbm.normalVsTumor$ResCC, GOMFTab = ansEA.gbm.normalVsTumor$ResMF, PathTab = ansEA.gbm.normalVsTumor$ResPat, nRGTab = gbm.DEG$gene_name, filename = NULL, nBar = 20) . # ) + # geom_point(aes(x=logFC,y=-log10(PValue), alpha=-log10(PValue), size=-log10(PValue))) . ?GDCquery . print(TCGAbiolinks:::getGDCprojects()$project_id[grepl(&quot;TCGA&quot;, TCGAbiolinks:::getGDCprojects()$project_id)]) . [1] &#34;TCGA-READ&#34; &#34;TCGA-UCS&#34; &#34;TCGA-COAD&#34; &#34;TCGA-CESC&#34; &#34;TCGA-PAAD&#34; &#34;TCGA-ESCA&#34; [7] &#34;TCGA-KIRP&#34; &#34;TCGA-PCPG&#34; &#34;TCGA-HNSC&#34; &#34;TCGA-BLCA&#34; &#34;TCGA-STAD&#34; &#34;TCGA-SARC&#34; [13] &#34;TCGA-CHOL&#34; &#34;TCGA-LAML&#34; &#34;TCGA-THYM&#34; &#34;TCGA-ACC&#34; &#34;TCGA-SKCM&#34; &#34;TCGA-LUAD&#34; [19] &#34;TCGA-LIHC&#34; &#34;TCGA-KIRC&#34; &#34;TCGA-KICH&#34; &#34;TCGA-DLBC&#34; &#34;TCGA-PRAD&#34; &#34;TCGA-OV&#34; [25] &#34;TCGA-MESO&#34; &#34;TCGA-LUSC&#34; &#34;TCGA-GBM&#34; &#34;TCGA-UVM&#34; &#34;TCGA-LGG&#34; &#34;TCGA-BRCA&#34; [31] &#34;TCGA-TGCT&#34; &#34;TCGA-THCA&#34; &#34;TCGA-UCEC&#34; . combData &lt;- cbind(gbm.rnaseqNormal.dataFilt,gbm.rnaseqTumor.dataFilt) . dim(gbm.rnaseqNormal.dataFilt) . &lt;ol class=list-inline&gt;45230 | 5 | &lt;/ol&gt; data_subset &lt;- combData[rowSums(combData)&gt;50000,] pheatmap::pheatmap(data_subset) . cal_z_score &lt;- function(x){ (x - mean(x)) / sd(x) } data_subset_norm &lt;- t(apply(data_subset, 1, cal_z_score)) pheatmap::pheatmap(data_subset_norm) . dim(gbm.rnaseqNormal.dataFilt) #, dim(gbm.rnaseqTumor.dataFilt) . &lt;ol class=list-inline&gt;45230 | 5 | &lt;/ol&gt; &lt;ol class=list-inline&gt;45230 | 13 | &lt;/ol&gt; sampCol &lt;- data.frame(sample = rep(c(&quot;normal&quot;, &quot;tumor&quot;), c(5,13))) row.names(sampCol) &lt;- colnames(combData) head(sampCol) . A data.frame: 6 × 1 sample . &lt;chr&gt; . TCGA-06-0675-11A-32R-A36H-07normal | . TCGA-06-0678-11A-32R-A36H-07normal | . TCGA-06-0680-11A-32R-A36H-07normal | . TCGA-06-0681-11A-41R-A36H-07normal | . TCGA-06-AABW-11A-31R-A36H-07normal | . TCGA-06-0125-02A-11R-2005-01tumor | . head(data_subset_norm) . A matrix: 6 × 18 of type dbl TCGA-06-0675-11A-32R-A36H-07TCGA-06-0678-11A-32R-A36H-07TCGA-06-0680-11A-32R-A36H-07TCGA-06-0681-11A-41R-A36H-07TCGA-06-AABW-11A-31R-A36H-07TCGA-06-0125-02A-11R-2005-01TCGA-06-0152-02A-01R-2005-01TCGA-06-0171-02A-11R-2005-01TCGA-06-0190-02A-01R-2005-01TCGA-06-0210-02A-01R-2005-01TCGA-06-0211-02A-02R-2005-01TCGA-06-0221-02A-11R-2005-01TCGA-14-0736-02A-01R-2005-01TCGA-14-1034-02B-01R-2005-01TCGA-14-1402-02A-01R-2005-01TCGA-19-0957-02A-11R-2005-01TCGA-19-1389-02A-21R-2005-01TCGA-19-4065-02A-11R-2005-01 . ENSG00000000003-1.0196779 | -1.0591508 | -1.0242190 | -1.0490206 | -1.0465753 | 0.5487588 | -0.15267126 | -0.4761395 | -0.1610549 | 0.01290535 | 0.6601911 | -0.6270447 | 1.8552071 | 1.5967120 | 1.98864647 | -0.4059266 | 0.2574278 | 0.1016321 | . ENSG00000000971-0.7591105 | -0.8156123 | -0.7817479 | -0.8788044 | -0.9492369 | -0.3087460 | -0.07614017 | 1.8140343 | 1.4152225 | -0.06395082 | -0.3151156 | -0.4490610 | 0.5622886 | -0.9210089 | -0.03388986 | -0.8626742 | 1.7574409 | 1.6661124 | . ENSG00000001461 0.1770849 | 0.4656345 | 0.2966788 | 0.3462751 | 3.6658259 | -0.4524244 | -0.57588750 | -0.3034011 | -0.5512652 | -0.43952704 | -0.6287668 | -0.1917801 | -0.4213535 | -0.6682796 | -0.62923575 | 0.5566196 | -0.2547428 | -0.3914550 | . ENSG00000001561-0.1035541 | 0.3832857 | -0.1130403 | 0.1716035 | 3.0601434 | -0.7991483 | -0.81923327 | 0.5050249 | -0.7525958 | -0.17833096 | -0.9677914 | -0.4553624 | 0.8678418 | -1.0084883 | -0.74510058 | 0.4589994 | 1.1051132 | -0.6093663 | . ENSG00000001629-1.4252221 | -1.0929321 | -1.1430777 | -1.1889941 | 2.0946355 | 1.3811182 | 0.98659929 | -0.2223322 | -0.5781846 | 0.23079053 | 0.4827268 | 0.3624982 | -0.5908721 | 1.2506188 | 0.39512305 | 0.3123526 | -0.5050808 | -0.7497671 | . ENSG00000001631-1.2549899 | -1.4775117 | -1.2503541 | -0.8346711 | -0.4043079 | 0.2748470 | 0.97640852 | -0.2938197 | 0.1527691 | 0.79020110 | 0.4880969 | -0.9196620 | -0.0944773 | 2.0805181 | 1.77764128 | -0.1369728 | 0.5360009 | -0.4097164 | . data_subset_norm &lt;- t(apply(data_subset, 1, cal_z_score)) pheatmap::pheatmap(data_subset_norm, annotation_col = sampCol) .",
            "url": "https://paulahsan.github.io/GuideForMuB/r/tcga/brca/jupyter/2022/06/27/afterDownloadingTCGAData.html",
            "relUrl": "/r/tcga/brca/jupyter/2022/06/27/afterDownloadingTCGAData.html",
            "date": " • Jun 27, 2022"
        }
        
    
  
    
  
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://paulahsan.github.io/GuideForMuB/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://paulahsan.github.io/GuideForMuB/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is Ahsan Polash’s blog for average Bioinformatician #This website is powered by fastpages [^1]. . #[^1]:a blogging platform that natively supports Jupyter notebooks in addition to other formats. .",
          "url": "https://paulahsan.github.io/GuideForMuB/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://paulahsan.github.io/GuideForMuB/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}